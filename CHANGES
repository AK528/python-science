-- python in HPC:

    https://github.com/pyhpc/pyhpc-tutorial



-- use project Euler for in-class code projects

-- piazza or freeforums.org  -- open discussion forum

-- tedEd -- exercises embedded in lectures

-- jiffylab -- set up a teaching environemtn 
   or ipython chrome app (colaboration ?)

-- do the codeacademy python track outside of class?

-- Stanford NIFTY: computer science projects for students

-- ipython widgets

-- wakari: host a notebook

-- plot.ly

-- coLaboratory Notebooks

  -- available in the Chrome store


-- nbdiff

-- mpld3 -- interactive matplotlib in ipython notebook

-- "seven ways to think like the web"

-- have a lecture at the start on "mananging projects with git, github, pull 
   requests



references:

 -- "Computational Thinking" J M Wing (Communications in the ACM)

 -- Computing 4 Physics: https://github.com/Computing4Physics/C4P



grading:

 -- grading is based on discussion.  Here's a loose metric:

    by posting, I don't mean a "me to" type post, but something
    either demonstrating a problem you don't understand (giving code),
    asking for some detail from the lecture to be explained,
    sharing a neat trick you found

     A: 12 postings to the discussion board (essentially once a week)

        +
 
        a small example showing how you can apply what we've discussed
        in class to your field.

     
     A-:  8 postings to the discussion board

     B+:  5 postings to the discussion board

     B:   2 postings to the discussion board

